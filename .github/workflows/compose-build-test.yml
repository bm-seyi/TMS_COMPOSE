name: Docker Compose Integration Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  docker-integration-test:
    runs-on: ubuntu-latest

    env:
      REDIS_PWD: testpassword
      VAULT_DEV_ROOT_TOKEN_ID: root_token
      MSSQL_PWD: "StrongPassword123"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.34.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verify installation


    - name: Create mssql_data volume if not exists
      run: |
        docker volume ls | grep mssql_data || docker volume create mssql_data
    
    - name: Create keycloak-certs volume if not exists
      run: |
        docker volume ls | grep keycloak-certs || docker volume create keycloak-certs


    - name: Create network if not exists
      run: |
        docker network ls | grep tms_network || docker network create tms_network

    - name: Start services with Docker Compose
      run: docker-compose up -d
    
    - name: Test Redis connection
      run: |
        docker exec tms-redis-signalr redis-cli -a $REDIS_PWD ping | grep PONG

    - name: Check Vault is responding
      run: |
        curl --fail http://localhost:8200/v1/sys/health || {
          echo "Vault not responding"
          docker-compose logs
          exit 1
        }
    - name: Wait for SQL Server to be healthy
      run: |
          retries=0
          max_retries=30
          while [ $retries -lt $max_retries ]; do
          health_status=$(docker inspect --format '{{.State.Health.Status}}' DevServer)
          echo "Current Health Status: $health_status"
          if [ "$health_status" == "healthy" ]; then
              echo "SQL Server is healthy!"
              break
          fi
          if [ $retries -ge $max_retries ]; then
              echo "SQL Server did not become healthy in time"
              exit 1
          fi
          echo "Waiting for SQL Server to be healthy..."
          sleep 5
          retries=$((retries + 1))
          done

    - name: Stop and clean up
      if: always()
      run: docker-compose down -v